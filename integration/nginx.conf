daemon off;
user www-data;
pid /var/run/nginx.pid;
worker_processes 4;
include /etc/nginx/modules-enabled/*.conf;
events {}

http {
    sendfile on;
    tcp_nodelay on;

    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/nginx-lua-prometheus/?.lua;;";

    error_log stderr;

    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics",
	  {sync_interval=0.4})
        metric_requests = prometheus:counter("requests_total",
          "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram("request_duration_seconds",
          "HTTP request latency", {"host"},
          {0.08, 0.089991, 0.1, 0.2, 0.75, 1, 1.5, 3.123232001, 5, 15, 120, 350.5, 1500, 75000, 1500000})
        metric_connections = prometheus:gauge("connections",
          "Number of HTTP connections", {"state"})
    }
    log_by_lua_block {
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time),
                               {ngx.var.server_name})
    }

    server {
        listen 18001;
        server_name fast;
        root /nginx-lua-prometheus/integration/www;
        index index.txt;

        location /error {
            return 500;
        }
        location /metrics {
            content_by_lua_block {
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            }
        }
    }
    server {
        listen 18002;
        server_name slow;
        location / {
            content_by_lua_block {
                -- sleep for 10-20ms.
                ngx.sleep(0.01 + (0.01 * math.random()))
                ngx.say("ok")
            }
        }
    }
}
